import UIKit
import BackgroundTasks


class AppDelegate: UIResponder, UIApplicationDelegate {

    func application(
        _ application: UIApplication,
        didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?
    ) -> Bool {
        // 1) –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö—ç–Ω–¥–ª–µ—Ä–∞
        BGTaskScheduler.shared.register(forTaskWithIdentifier: "com.gistrec.glucosesync.refresh", using: nil) { task in
            // Ensure the task is of the expected type; otherwise mark it as failed
            guard let refreshTask = task as? BGAppRefreshTask else {
                task.setTaskCompleted(success: false)
                return
            }
            self.handleGlucoseSync(task: refreshTask)
        }

        // 2) –ü–µ—Ä–≤–∏—á–Ω–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
        scheduleGlucoseSync()
        return true
    }

    func applicationDidEnterBackground(_ application: UIApplication) {
        // 3) –ü–æ–≤—Ç–æ—Ä–Ω–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏ —É—Ö–æ–¥–µ –≤ —Ñ–æ–Ω
        scheduleGlucoseSync()
    }

    func scheduleGlucoseSync() {
        let identifier = "com.gistrec.glucosesync.refresh"

        // Cancel any previously scheduled requests to avoid duplicates
        BGTaskScheduler.shared.cancel(taskRequestWithIdentifier: identifier)
        print("üîÅ Cancelled existing task requests")

        let request = BGAppRefreshTaskRequest(identifier: identifier)
        request.earliestBeginDate = Date(timeIntervalSinceNow: 60 * 60) // –∫–∞–∂–¥—ã–π —á–∞—Å

        do {
            try BGTaskScheduler.shared.submit(request)
            print("‚úÖ Scheduled glucose sync")
        } catch {
            print("‚ùå Failed to schedule: \(error)")
        }
    }

    func handleGlucoseSync(task: BGAppRefreshTask) {
        // –í—Å–µ–≥–¥–∞ –ø–ª–∞–Ω–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â—É—é –∑–∞—Ä–∞–Ω–µ–µ
        scheduleGlucoseSync()

        // –¢–∞–π–º–∞—É—Ç –æ—Ç —Å–∏—Å—Ç–µ–º—ã
        task.expirationHandler = {
            print("‚è±Ô∏è BG task expired")
            task.setTaskCompleted(success: false)
        }

        // –î–æ—Å—Ç–∞—ë–º –∫—Ä–µ–¥—ã (–±–µ–∑ UI)
        let email = UserDefaults.standard.string(forKey: "userEmail") ?? ""
        let password = UserDefaults.standard.string(forKey: "userPassword") ?? ""

        guard !email.isEmpty, !password.isEmpty else {
            print("‚ùå Missing credentials")
            task.setTaskCompleted(success: false)
            return
        }

        // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–Ω–∫ (–±–µ–∑ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫)
        SyncCoordinator.shared.syncGlucoseFromServer(
            email: email,
            password: password,
            onSuccess: {
                print("‚úÖ BG sync completed")
                task.setTaskCompleted(success: true)
            },
            onError: { error in
                print("‚ùå BG sync failed: \(error)")
                task.setTaskCompleted(success: false)
            }
        )
    }
}
